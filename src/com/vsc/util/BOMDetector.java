package com.vsc.util;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import common.util.CryptoUtil;

/**
	made up, decorated, fixed and customized by ducnm
 */
public final class BOMDetector {
	private File fRootDir;
	private List<String> fExtensions;
	private InputStream inputStream = null;
	
	private final char[] uft8 = {0xEF,0xBB,0xBF};
	private final char[] uft16le = {0xFF, 0xFE};
	private final char[] uft16be = {0xFE,0xFF};
	private final static String[] char_bom = {"ï»¿","þÿ","ÿþ"};
	private static final int[] BYTE_ORDER_MARK_UTF8 = { 239, 187, 191 };
	private static final int[] BYTE_ORDER_MARK_UTF16_BE = { 254, 255 };
	private static final int[] BYTE_ORDER_MARK_UTF16_LE = { 255, 254 };

	public static void main(String... aArgs) throws IOException {
//		BOMDetector bom = new BOMDetector("C:\\xmldata\\checkout\\", ".txt", ".jsp", ".jspf", ".tag", ".html", ".css",".xml", ".js", ".sql", ".tld");
		BOMDetector bom = new BOMDetector("C:/xmldata/checkout/", ".xml");
//		File tmpF = new File("C:/xmldata/checkout/KCB_31291_201703171458_1700004701.xml");
//		String content = "<GIAMDINHHS><THONGTINDONVI><MACSKCB>31291</MACSKCB></THONGTINDONVI><THONGTINHOSO><NGAYLAP>20170321</NGAYLAP><SOLUONGHOSO>1</SOLUONGHOSO><DANHSACHHOSO><HOSO><FILEHOSO><LOAIHOSO>XML1</LOAIHOSO><NOIDUNGFILE>77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4NCjxUT05HX0hPUD4NCiAgICA8TUFfTEs+MTcwMDAwNTA1NTwvTUFfTEs+DQogICAgPFNUVD4xPC9TVFQ+DQogICAgPE1BX0JOPjAwMDAwNDQxMTM8L01BX0JOPg0KICAgIDxIT19URU4+VsWpIFRo4buLIEdpYW88L0hPX1RFTj4NCiAgICA8TkdBWV9TSU5IPjE5NTIxMjIwPC9OR0FZX1NJTkg+DQogICAgPEdJT0lfVElOSD4yPC9HSU9JX1RJTkg+DQogICAgPERJQV9DSEk+UGjGsOG7nW5nIFbhuqFuIEjGsMahbmcsIFF14bqtbiDEkOG7kyBTxqFuLCBUcCBI4bqjaSBQaMOybmcgLSAwMS4wMTwvRElBX0NIST4NCiAgICA8TUFfVEhFPlRRNDk3OTczMTU5MTQxMjwvTUFfVEhFPg0KICAgIDxNQV9ES0JEPjMxMDEyPC9NQV9ES0JEPg0KICAgIDxHVF9USEVfVFU+MjAxNjAxMDE8L0dUX1RIRV9UVT4NCiAgICA8R1RfVEhFX0RFTj4yMDE3MTIzMTwvR1RfVEhFX0RFTj4NCiAgICA8VEVOX0JFTkg+xJDhu6VjIHRo4buneSB0aW5oIHRo4buDIG5nxrDhu51pIGdpw6A8L1RFTl9CRU5IPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TUFfQkVOSEtIQUMgLz4NCiAgICA8TUFfTFlET19WVklFTj4xPC9NQV9MWURPX1ZWSUVOPg0KICAgIDxNQV9OT0lfQ0hVWUVOIC8+DQogICAgPE1BX1RBSV9OQU4gLz4NCiAgICA8TkdBWV9WQU8+MjAxNzAzMTcwODI0PC9OR0FZX1ZBTz4NCiAgICA8TkdBWV9SQT4yMDE3MDMxODA3NTQ8L05HQVlfUkE+DQogICAgPFNPX05HQVlfRFRSST4xPC9TT19OR0FZX0RUUkk+DQogICAgPEtFVF9RVUFfRFRSST4xPC9LRVRfUVVBX0RUUkk+DQogICAgPFRJTkhfVFJBTkdfUlY+MTwvVElOSF9UUkFOR19SVj4NCiAgICA8TkdBWV9UVE9BTj4yMDE3MDMyMTE0NDM8L05HQVlfVFRPQU4+DQogICAgPE1VQ19IVU9ORz44MC4wMDwvTVVDX0hVT05HPg0KICAgIDxUX1RIVU9DPjE1ODIwODwvVF9USFVPQz4NCiAgICA8VF9WVFlUPjMwOTAwMDA8L1RfVlRZVD4NCiAgICA8VF9UT05HQ0hJPjU5ODA3MDg8L1RfVE9OR0NIST4NCiAgICA8VF9CTlRUPjExOTYxNDI8L1RfQk5UVD4NCiAgICA8VF9CSFRUPjQ3ODQ1NjY8L1RfQkhUVD4NCiAgICA8VF9OR1VPTktIQUM+MDwvVF9OR1VPTktIQUM+DQogICAgPFRfTkdPQUlEUz4wPC9UX05HT0FJRFM+DQogICAgPE5BTV9RVD4yMDE3PC9OQU1fUVQ+DQogICAgPFRIQU5HX1FUPjM8L1RIQU5HX1FUPg0KICAgIDxNQV9MT0FJX0tDQj4zPC9NQV9MT0FJX0tDQj4NCiAgICA8TUFfS0hPQT41PC9NQV9LSE9BPg0KICAgIDxNQV9DU0tDQj4zMTI5MTwvTUFfQ1NLQ0I+DQogICAgPE1BX0tIVVZVQyAvPg0KICAgIDxNQV9QVFRUX1FUIC8+DQogICAgPENBTl9OQU5HPjAuMDA8L0NBTl9OQU5HPg0KICA8L1RPTkdfSE9QPg==</NOIDUNGFILE></FILEHOSO><FILEHOSO><LOAIHOSO>XML2</LOAIHOSO><NOIDUNGFILE>PERTQUNIX0NISV9USUVUX1RIVU9DPg0KICA8Q0hJX1RJRVRfVEhVT0M+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MTwvU1RUPg0KICAgIDxNQV9USFVPQz40MC4xMDA1PC9NQV9USFVPQz4NCiAgICA8TUFfTkhPTT40PC9NQV9OSE9NPg0KICAgIDxURU5fVEhVT0M+S2FsaWNsb3JhdHVtPC9URU5fVEhVT0M+DQogICAgPERPTl9WSV9USU5IPlZpw6puIDwvRE9OX1ZJX1RJTkg+DQogICAgPEhBTV9MVU9ORz41MDBtZzwvSEFNX0xVT05HPg0KICAgIDxEVU9OR19EVU5HPjEuMDE8L0RVT05HX0RVTkc+DQogICAgPExJRVVfRFVORyAvPg0KICAgIDxTT19EQU5HX0tZPlZOLTE0MTEwLTExPC9TT19EQU5HX0tZPg0KICAgIDxTT19MVU9ORz4xLjAwMDAwPC9TT19MVU9ORz4NCiAgICA8RE9OX0dJQT4xNDk5Ljk5ODwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+MTUwMDwvVEhBTkhfVElFTj4NCiAgICA8TUFfS0hPQT41PC9NQV9LSE9BPg0KICAgIDxNQV9CQUNfU0k+MDAwMDA2PC9NQV9CQUNfU0k+DQogICAgPE1BX0JFTkg+SDI1PC9NQV9CRU5IPg0KICAgIDxOR0FZX1lMPjIwMTcwMzE3MDgyODwvTkdBWV9ZTD4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX1RIVU9DPg0KICA8Q0hJX1RJRVRfVEhVT0M+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MjwvU1RUPg0KICAgIDxNQV9USFVPQz40MC4xOTg8L01BX1RIVU9DPg0KICAgIDxNQV9OSE9NPjQ8L01BX05IT00+DQogICAgPFRFTl9USFVPQz5HZW50YW15Y2luPC9URU5fVEhVT0M+DQogICAgPERPTl9WSV9USU5IPuG7kG5nIHRpw6ptPC9ET05fVklfVElOSD4NCiAgICA8SEFNX0xVT05HPjgwbWc8L0hBTV9MVU9ORz4NCiAgICA8RFVPTkdfRFVORz4yLjAxPC9EVU9OR19EVU5HPg0KICAgIDxMSUVVX0RVTkcgLz4NCiAgICA8U09fREFOR19LWT5WRC05NTg4LTA5PC9TT19EQU5HX0tZPg0KICAgIDxTT19MVU9ORz4xLjAwMDAwPC9TT19MVU9ORz4NCiAgICA8RE9OX0dJQT4xMzE4LjgwMDwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+MTMxOTwvVEhBTkhfVElFTj4NCiAgICA8TUFfS0hPQT41PC9NQV9LSE9BPg0KICAgIDxNQV9CQUNfU0k+MDAwMDA2PC9NQV9CQUNfU0k+DQogICAgPE1BX0JFTkg+SDI1PC9NQV9CRU5IPg0KICAgIDxOR0FZX1lMPjIwMTcwMzE3MDgyODwvTkdBWV9ZTD4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX1RIVU9DPg0KICA8Q0hJX1RJRVRfVEhVT0M+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MzwvU1RUPg0KICAgIDxNQV9USFVPQz40MC44NDQ8L01BX1RIVU9DPg0KICAgIDxNQV9OSE9NPjQ8L01BX05IT00+DQogICAgPFRFTl9USFVPQz5BY2V0YXpvbGFtaWRlPC9URU5fVEhVT0M+DQogICAgPERPTl9WSV9USU5IPlZpw6puPC9ET05fVklfVElOSD4NCiAgICA8SEFNX0xVT05HPjI1MG1nPC9IQU1fTFVPTkc+DQogICAgPERVT05HX0RVTkc+MS4wMTwvRFVPTkdfRFVORz4NCiAgICA8TElFVV9EVU5HIC8+DQogICAgPFNPX0RBTkdfS1k+VkQtMTMzNjEtMTA8L1NPX0RBTkdfS1k+DQogICAgPFNPX0xVT05HPjIuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjcwMC4wMDA8L0RPTl9HSUE+DQogICAgPFRZTEVfVFQ+MTAwPC9UWUxFX1RUPg0KICAgIDxUSEFOSF9USUVOPjE0MDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NTwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4Mjg8L05HQVlfWUw+DQogICAgPE1BX1BUVFQ+MTwvTUFfUFRUVD4NCiAgPC9DSElfVElFVF9USFVPQz4NCiAgPENISV9USUVUX1RIVU9DPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjQ8L1NUVD4NCiAgICA8TUFfVEhVT0M+NDAuNzY2PC9NQV9USFVPQz4NCiAgICA8TUFfTkhPTT40PC9NQV9OSE9NPg0KICAgIDxURU5fVEhVT0M+RGV4YW1ldGhhc29uZTwvVEVOX1RIVU9DPg0KICAgIDxET05fVklfVElOSD7hu5BuZzwvRE9OX1ZJX1RJTkg+DQogICAgPEhBTV9MVU9ORz40bWcvIDFtbDwvSEFNX0xVT05HPg0KICAgIDxEVU9OR19EVU5HPjIuMTA8L0RVT05HX0RVTkc+DQogICAgPExJRVVfRFVORyAvPg0KICAgIDxTT19EQU5HX0tZPlZELTEyNDQzLTEwPC9TT19EQU5HX0tZPg0KICAgIDxTT19MVU9ORz4xLjAwMDAwPC9TT19MVU9ORz4NCiAgICA8RE9OX0dJQT45MjQuMDAwPC9ET05fR0lBPg0KICAgIDxUWUxFX1RUPjEwMDwvVFlMRV9UVD4NCiAgICA8VEhBTkhfVElFTj45MjQ8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NTwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4Mjg8L05HQVlfWUw+DQogICAgPE1BX1BUVFQ+MTwvTUFfUFRUVD4NCiAgPC9DSElfVElFVF9USFVPQz4NCiAgPENISV9USUVUX1RIVU9DPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjU8L1NUVD4NCiAgICA8TUFfVEhVT0M+NDAuMjA3PC9NQV9USFVPQz4NCiAgICA8TUFfTkhPTT40PC9NQV9OSE9NPg0KICAgIDxURU5fVEhVT0M+RGV4LXRvYnJpbjwvVEVOX1RIVU9DPg0KICAgIDxET05fVklfVElOSD5M4buNPC9ET05fVklfVElOSD4NCiAgICA8SEFNX0xVT05HPjNtZysxbWcvbWwsIGzhu40gNW1sPC9IQU1fTFVPTkc+DQogICAgPERVT05HX0RVTkc+Ni4wMTwvRFVPTkdfRFVORz4NCiAgICA8TElFVV9EVU5HIC8+DQogICAgPFNPX0RBTkdfS1k+Vk4tMTY1NTMtMTM8L1NPX0RBTkdfS1k+DQogICAgPFNPX0xVT05HPjEuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjQ0OTk5Ljk5OTwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+NDUwMDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NTwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4Mjg8L05HQVlfWUw+DQogICAgPE1BX1BUVFQ+MTwvTUFfUFRUVD4NCiAgPC9DSElfVElFVF9USFVPQz4NCiAgPENISV9USUVUX1RIVU9DPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjY8L1NUVD4NCiAgICA8TUFfVEhVT0M+NDAuMjMyPC9NQV9USFVPQz4NCiAgICA8TUFfTkhPTT40PC9NQV9OSE9NPg0KICAgIDxURU5fVEhVT0M+VmlnYW1veDwvVEVOX1RIVU9DPg0KICAgIDxET05fVklfVElOSD5M4buNPC9ET05fVklfVElOSD4NCiAgICA8SEFNX0xVT05HPjAsNSU8L0hBTV9MVU9ORz4NCiAgICA8RFVPTkdfRFVORz42LjAxPC9EVU9OR19EVU5HPg0KICAgIDxMSUVVX0RVTkcgLz4NCiAgICA8U09fREFOR19LWT5WTi0xNTcwNy0xMjwvU09fREFOR19LWT4NCiAgICA8U09fTFVPTkc+MS4wMDAwMDwvU09fTFVPTkc+DQogICAgPERPTl9HSUE+ODk5OTguNjUwPC9ET05fR0lBPg0KICAgIDxUWUxFX1RUPjEwMDwvVFlMRV9UVD4NCiAgICA8VEhBTkhfVElFTj44OTk5OTwvVEhBTkhfVElFTj4NCiAgICA8TUFfS0hPQT41PC9NQV9LSE9BPg0KICAgIDxNQV9CQUNfU0k+MDAwMDA2PC9NQV9CQUNfU0k+DQogICAgPE1BX0JFTkg+SDI1PC9NQV9CRU5IPg0KICAgIDxOR0FZX1lMPjIwMTcwMzE3MDgyODwvTkdBWV9ZTD4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX1RIVU9DPg0KICA8Q0hJX1RJRVRfVEhVT0M+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+NzwvU1RUPg0KICAgIDxNQV9USFVPQz40MC4zMDwvTUFfVEhVT0M+DQogICAgPE1BX05IT00+NDwvTUFfTkhPTT4NCiAgICA8VEVOX1RIVU9DPlZvbHRhcmVuIDc1bWcvM21sIEluaiAzbWw8L1RFTl9USFVPQz4NCiAgICA8RE9OX1ZJX1RJTkg+4buQbmcgdGnDqm08L0RPTl9WSV9USU5IPg0KICAgIDxIQU1fTFVPTkc+NzVtZy8zbWw8L0hBTV9MVU9ORz4NCiAgICA8RFVPTkdfRFVORz4yLjEwPC9EVU9OR19EVU5HPg0KICAgIDxMSUVVX0RVTkcgLz4NCiAgICA8U09fREFOR19LWT5WTi0xMzI5MS0xMTwvU09fREFOR19LWT4NCiAgICA8U09fTFVPTkc+MS4wMDAwMDwvU09fTFVPTkc+DQogICAgPERPTl9HSUE+MTgwNjYuMDAwPC9ET05fR0lBPg0KICAgIDxUWUxFX1RUPjEwMDwvVFlMRV9UVD4NCiAgICA8VEhBTkhfVElFTj4xODA2NjwvVEhBTkhfVElFTj4NCiAgICA8TUFfS0hPQT41PC9NQV9LSE9BPg0KICAgIDxNQV9CQUNfU0k+MDAwMDA2PC9NQV9CQUNfU0k+DQogICAgPE1BX0JFTkg+SDI1PC9NQV9CRU5IPg0KICAgIDxOR0FZX1lMPjIwMTcwMzE3MDgyODwvTkdBWV9ZTD4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX1RIVU9DPg0KPC9EU0FDSF9DSElfVElFVF9USFVPQz4=</NOIDUNGFILE></FILEHOSO><FILEHOSO><LOAIHOSO>XML3</LOAIHOSO><NOIDUNGFILE>PERTQUNIX0NISV9USUVUX0RWS1Q+DQogIDxDSElfVElFVF9EVktUPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjE8L1NUVD4NCiAgICA8TUFfRElDSF9WVT4xNC4xODk3PC9NQV9ESUNIX1ZVPg0KICAgIDxNQV9WQVRfVFUgLz4NCiAgICA8TUFfTkhPTT4xNTwvTUFfTkhPTT4NCiAgICA8VEVOX0RJQ0hfVlU+S2jDoW0gTeG6r3Q8L1RFTl9ESUNIX1ZVPg0KICAgIDxET05fVklfVElOSD5M4bqnbjwvRE9OX1ZJX1RJTkg+DQogICAgPFNPX0xVT05HPjEuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjE1MDAwLjAwMDwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+MTUwMDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NjwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4MDk8L05HQVlfWUw+DQogICAgPE5HQVlfS1EgLz4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX0RWS1Q+DQogIDxDSElfVElFVF9EVktUPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjI8L1NUVD4NCiAgICA8TUFfRElDSF9WVT4yMi4wMDE5LjEzNDg8L01BX0RJQ0hfVlU+DQogICAgPE1BX1ZBVF9UVSAvPg0KICAgIDxNQV9OSE9NPjE8L01BX05IT00+DQogICAgPFRFTl9ESUNIX1ZVPlRo4budaSBnaWFuIG3DoXUgY2jhuqN5IHBoxrDGoW5nIHBow6FwIER1a2U8L1RFTl9ESUNIX1ZVPg0KICAgIDxET05fVklfVElOSD5M4bqnbjwvRE9OX1ZJX1RJTkg+DQogICAgPFNPX0xVT05HPjEuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjExMDAwLjAwMDwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+MTEwMDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NjwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4MTA8L05HQVlfWUw+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODMyPC9OR0FZX0tRPg0KICAgIDxNQV9QVFRUPjE8L01BX1BUVFQ+DQogIDwvQ0hJX1RJRVRfRFZLVD4NCiAgPENISV9USUVUX0RWS1Q+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MzwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPjAxLjAyODUuMTM0OTwvTUFfRElDSF9WVT4NCiAgICA8TUFfVkFUX1RVIC8+DQogICAgPE1BX05IT00+MTwvTUFfTkhPTT4NCiAgICA8VEVOX0RJQ0hfVlU+WMOpdCBuZ2hp4buHbSDEkcO0bmcgbcOhdSBuaGFuaCB04bqhaSBnacaw4budbmc8L1RFTl9ESUNIX1ZVPg0KICAgIDxET05fVklfVElOSD5M4bqnbjwvRE9OX1ZJX1RJTkg+DQogICAgPFNPX0xVT05HPjEuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjExMDAwLjAwMDwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+MTEwMDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NjwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4MTA8L05HQVlfWUw+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODMyPC9OR0FZX0tRPg0KICAgIDxNQV9QVFRUPjE8L01BX1BUVFQ+DQogIDwvQ0hJX1RJRVRfRFZLVD4NCiAgPENISV9USUVUX0RWS1Q+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+NDwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPjIzLjAyMDYuMTU5NjwvTUFfRElDSF9WVT4NCiAgICA8TUFfVkFUX1RVIC8+DQogICAgPE1BX05IT00+MTwvTUFfTkhPTT4NCiAgICA8VEVOX0RJQ0hfVlU+VOG7lW5nIHBow6JuIHTDrWNoIG7GsOG7m2MgdGnhu4N1IChC4bqxbmcgbcOheSB04buxIMSR4buZbmcpPC9URU5fRElDSF9WVT4NCiAgICA8RE9OX1ZJX1RJTkg+TOG6p248L0RPTl9WSV9USU5IPg0KICAgIDxTT19MVU9ORz4xLjAwMDAwPC9TT19MVU9ORz4NCiAgICA8RE9OX0dJQT4zNTAwMC4wMDA8L0RPTl9HSUE+DQogICAgPFRZTEVfVFQ+MTAwPC9UWUxFX1RUPg0KICAgIDxUSEFOSF9USUVOPjM1MDAwPC9USEFOSF9USUVOPg0KICAgIDxNQV9LSE9BPjY8L01BX0tIT0E+DQogICAgPE1BX0JBQ19TST4wMDAwMDY8L01BX0JBQ19TST4NCiAgICA8TUFfQkVOSD5IMjU8L01BX0JFTkg+DQogICAgPE5HQVlfWUw+MjAxNzAzMTcwODEwPC9OR0FZX1lMPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX0RWS1Q+DQogIDxDSElfVElFVF9EVktUPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjU8L1NUVD4NCiAgICA8TUFfRElDSF9WVT4xOC4wMTE5LjAwMTI8L01BX0RJQ0hfVlU+DQogICAgPE1BX1ZBVF9UVSAvPg0KICAgIDxNQV9OSE9NPjI8L01BX05IT00+DQogICAgPFRFTl9ESUNIX1ZVPkNo4bulcCBYcXVhbmcgbmfhu7FjIHRo4bqzbmc8L1RFTl9ESUNIX1ZVPg0KICAgIDxET05fVklfVElOSD5M4bqnbjwvRE9OX1ZJX1RJTkg+DQogICAgPFNPX0xVT05HPjEuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjQyMDAwLjAwMDwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+NDIwMDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NjwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4MTA8L05HQVlfWUw+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODQyPC9OR0FZX0tRPg0KICAgIDxNQV9QVFRUPjE8L01BX1BUVFQ+DQogIDwvQ0hJX1RJRVRfRFZLVD4NCiAgPENISV9USUVUX0RWS1Q+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+NjwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPjE0LjAyNDAuMDg0NTwvTUFfRElDSF9WVT4NCiAgICA8TUFfVkFUX1RVIC8+DQogICAgPE1BX05IT00+MjwvTUFfTkhPTT4NCiAgICA8VEVOX0RJQ0hfVlU+U2nDqnUgw6JtIG3huq90IChzacOqdSDDom0gdGjGsOG7nW5nIHF1aSk8L1RFTl9ESUNIX1ZVPg0KICAgIDxET05fVklfVElOSD5M4bqnbjwvRE9OX1ZJX1RJTkg+DQogICAgPFNPX0xVT05HPjEuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjQxNTAwLjAwMDwvRE9OX0dJQT4NCiAgICA8VFlMRV9UVD4xMDA8L1RZTEVfVFQ+DQogICAgPFRIQU5IX1RJRU4+NDE1MDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NjwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4MTA8L05HQVlfWUw+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODMzPC9OR0FZX0tRPg0KICAgIDxNQV9QVFRUPjE8L01BX1BUVFQ+DQogIDwvQ0hJX1RJRVRfRFZLVD4NCiAgPENISV9USUVUX0RWS1Q+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+NzwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPjE0LjAwMDUuMDgxNTwvTUFfRElDSF9WVT4NCiAgICA8TUFfVkFUX1RVIC8+DQogICAgPE1BX05IT00+ODwvTUFfTkhPTT4NCiAgICA8VEVOX0RJQ0hfVlU+UGjhuqt1IHRodeG6rXQgdMOhbiBuaHV54buFbiB0aOG7gyB0aOG7p3kgdGluaCBi4bqxbmcgc2nDqnUgw6JtIChQaGFjbykgY8OzIGhv4bq3YyBraMO0bmcgxJHhurd0IElPTDwvVEVOX0RJQ0hfVlU+DQogICAgPERPTl9WSV9USU5IPkzhuqduPC9ET05fVklfVElOSD4NCiAgICA8U09fTFVPTkc+MS4wMDAwMDwvU09fTFVPTkc+DQogICAgPERPTl9HSUE+MjQ4MjAwMC4wMDA8L0RPTl9HSUE+DQogICAgPFRZTEVfVFQ+MTAwPC9UWUxFX1RUPg0KICAgIDxUSEFOSF9USUVOPjI0ODIwMDA8L1RIQU5IX1RJRU4+DQogICAgPE1BX0tIT0E+NTwvTUFfS0hPQT4NCiAgICA8TUFfQkFDX1NJPjAwMDAwNjwvTUFfQkFDX1NJPg0KICAgIDxNQV9CRU5IPkgyNTwvTUFfQkVOSD4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzA4Mjg8L05HQVlfWUw+DQogICAgPE5HQVlfS1EgLz4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX0RWS1Q+DQogIDxDSElfVElFVF9EVktUPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjg8L1NUVD4NCiAgICA8TUFfRElDSF9WVT5LMzAuMTkzMjwvTUFfRElDSF9WVT4NCiAgICA8TUFfVkFUX1RVIC8+DQogICAgPE1BX05IT00+MTU8L01BX05IT00+DQogICAgPFRFTl9ESUNIX1ZVPkdpxrDhu51uZyBOZ2/huqFpIGtob2EgbG/huqFpIDIgSOG6oW5nIElJIC0gS2hvYSBN4bqvdDwvVEVOX0RJQ0hfVlU+DQogICAgPERPTl9WSV9USU5IPk5nw6B5PC9ET05fVklfVElOSD4NCiAgICA8U09fTFVPTkc+MS4wMDAwMDwvU09fTFVPTkc+DQogICAgPERPTl9HSUE+OTUwMDAuMDAwPC9ET05fR0lBPg0KICAgIDxUWUxFX1RUPjEwMDwvVFlMRV9UVD4NCiAgICA8VEhBTkhfVElFTj45NTAwMDwvVEhBTkhfVElFTj4NCiAgICA8TUFfS0hPQT41PC9NQV9LSE9BPg0KICAgIDxNQV9CQUNfU0k+MDAwMDA2PC9NQV9CQUNfU0k+DQogICAgPE1BX0JFTkg+SDI1PC9NQV9CRU5IPg0KICAgIDxOR0FZX1lMPjIwMTcwMzE3MDgyODwvTkdBWV9ZTD4NCiAgICA8TkdBWV9LUSAvPg0KICAgIDxNQV9QVFRUPjE8L01BX1BUVFQ+DQogIDwvQ0hJX1RJRVRfRFZLVD4NCiAgPENISV9USUVUX0RWS1Q+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+OTwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVIC8+DQogICAgPE1BX1ZBVF9UVT5OMDYuMDMuMDEwLjI8L01BX1ZBVF9UVT4NCiAgICA8TUFfTkhPTT4xMTwvTUFfTkhPTT4NCiAgICA8VEVOX0RJQ0hfVlU+VGjhu6d5IHRpbmggdGjhu4MgbmjDom4gdOG6oW8gLUx1Y2lhIDYwMSAtIFBZPC9URU5fRElDSF9WVT4NCiAgICA8RE9OX1ZJX1RJTkg+Q8OhaTwvRE9OX1ZJX1RJTkg+DQogICAgPFNPX0xVT05HPjEuMDAwMDA8L1NPX0xVT05HPg0KICAgIDxET05fR0lBPjMwOTAwMDAuMDAwPC9ET05fR0lBPg0KICAgIDxUWUxFX1RUPjEwMDwvVFlMRV9UVD4NCiAgICA8VEhBTkhfVElFTj4zMDkwMDAwPC9USEFOSF9USUVOPg0KICAgIDxNQV9LSE9BPjE1PC9NQV9LSE9BPg0KICAgIDxNQV9CQUNfU0k+MDAwMDA2PC9NQV9CQUNfU0k+DQogICAgPE1BX0JFTkggLz4NCiAgICA8TkdBWV9ZTD4yMDE3MDMxNzEzMzg8L05HQVlfWUw+DQogICAgPE5HQVlfS1EgLz4NCiAgICA8TUFfUFRUVD4xPC9NQV9QVFRUPg0KICA8L0NISV9USUVUX0RWS1Q+DQo8L0RTQUNIX0NISV9USUVUX0RWS1Q+</NOIDUNGFILE></FILEHOSO><FILEHOSO><LOAIHOSO>XML4</LOAIHOSO><NOIDUNGFILE>PERTQUNIX0NISV9USUVUX0NMUz4NCiAgPENISV9USUVUX0NMUz4NCiAgICA8TUFfTEs+MTcwMDAwNTA1NTwvTUFfTEs+DQogICAgPFNUVD4xPC9TVFQ+DQogICAgPE1BX0RJQ0hfVlU+RDYxPC9NQV9ESUNIX1ZVPg0KICAgIDxNQV9DSElfU08+MDRDNS4xMTg8L01BX0NISV9TTz4NCiAgICA8VEVOX0NISV9TTz5UaOG7nWkgZ2lhbiBtw6F1IGNo4bqjeSBwaMawxqFuZyBwaMOhcCBEdWtlPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJPjM8L0dJQV9UUkk+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MjwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPkQ2MTA8L01BX0RJQ0hfVlU+DQogICAgPE1BX0NISV9TTz4wNEM1LjEuMTY3MTwvTUFfQ0hJX1NPPg0KICAgIDxURU5fQ0hJX1NPPnjDqXQgbmdoaeG7h20gxJHDtG5nIG3DoXUgbmhhbmggdOG6oWkgZ2nGsOG7nW5nPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJPjc8L0dJQV9UUkk+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MzwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPkQ2NjwvTUFfRElDSF9WVT4NCiAgICA8TUFfQ0hJX1NPPjA0QzUuMi4xODY1PC9NQV9DSElfU08+DQogICAgPFRFTl9DSElfU08+VOG7lW5nIHBow6JuIHTDrWNoIG7GsOG7m2MgdGnhu4N1IChC4bqxbmcgbcOheSB04buxIMSR4buZbmcpPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJIC8+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+NDwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPkQ2NjwvTUFfRElDSF9WVT4NCiAgICA8TUFfQ0hJX1NPPjA0QzUuMi4xODY1LTAxPC9NQV9DSElfU08+DQogICAgPFRFTl9DSElfU08+VOG7iSB0cuG7jW5nPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJPjEsMDIwPC9HSUFfVFJJPg0KICAgIDxNQV9NQVkgLz4NCiAgICA8TU9fVEEgLz4NCiAgICA8S0VUX0xVQU4gLz4NCiAgICA8TkdBWV9LUT4yMDE3MDMxNzA4MzI8L05HQVlfS1E+DQogIDwvQ0hJX1RJRVRfQ0xTPg0KICA8Q0hJX1RJRVRfQ0xTPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjU8L1NUVD4NCiAgICA8TUFfRElDSF9WVT5ENjY8L01BX0RJQ0hfVlU+DQogICAgPE1BX0NISV9TTz4wNEM1LjIuMTg2NS0wMjwvTUFfQ0hJX1NPPg0KICAgIDxURU5fQ0hJX1NPPnBIPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJPjcsMDwvR0lBX1RSST4NCiAgICA8TUFfTUFZIC8+DQogICAgPE1PX1RBIC8+DQogICAgPEtFVF9MVUFOIC8+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODMyPC9OR0FZX0tRPg0KICA8L0NISV9USUVUX0NMUz4NCiAgPENISV9USUVUX0NMUz4NCiAgICA8TUFfTEs+MTcwMDAwNTA1NTwvTUFfTEs+DQogICAgPFNUVD42PC9TVFQ+DQogICAgPE1BX0RJQ0hfVlU+RDY2PC9NQV9ESUNIX1ZVPg0KICAgIDxNQV9DSElfU08+MDRDNS4yLjE4NjUtMDM8L01BX0NISV9TTz4NCiAgICA8VEVOX0NISV9TTz5C4bqhY2ggY+G6p3U8L1RFTl9DSElfU08+DQogICAgPEdJQV9UUkkgLz4NCiAgICA8TUFfTUFZIC8+DQogICAgPE1PX1RBIC8+DQogICAgPEtFVF9MVUFOIC8+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODMyPC9OR0FZX0tRPg0KICA8L0NISV9USUVUX0NMUz4NCiAgPENISV9USUVUX0NMUz4NCiAgICA8TUFfTEs+MTcwMDAwNTA1NTwvTUFfTEs+DQogICAgPFNUVD43PC9TVFQ+DQogICAgPE1BX0RJQ0hfVlU+RDY2PC9NQV9ESUNIX1ZVPg0KICAgIDxNQV9DSElfU08+MDRDNS4yLjE4NjUtMDQ8L01BX0NISV9TTz4NCiAgICA8VEVOX0NISV9TTz5I4buTbmcgY+G6p3U8L1RFTl9DSElfU08+DQogICAgPEdJQV9UUkk+Kys8L0dJQV9UUkk+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+ODwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPkQ2NjwvTUFfRElDSF9WVT4NCiAgICA8TUFfQ0hJX1NPPjA0QzUuMi4xODY1LTA1PC9NQV9DSElfU08+DQogICAgPFRFTl9DSElfU08+Tml0cml0PC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJIC8+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+OTwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPkQ2NjwvTUFfRElDSF9WVT4NCiAgICA8TUFfQ0hJX1NPPjA0QzUuMi4xODY1LTA2PC9NQV9DSElfU08+DQogICAgPFRFTl9DSElfU08+UHJvdGVpbjwvVEVOX0NISV9TTz4NCiAgICA8R0lBX1RSSSAvPg0KICAgIDxNQV9NQVkgLz4NCiAgICA8TU9fVEEgLz4NCiAgICA8S0VUX0xVQU4gLz4NCiAgICA8TkdBWV9LUT4yMDE3MDMxNzA4MzI8L05HQVlfS1E+DQogIDwvQ0hJX1RJRVRfQ0xTPg0KICA8Q0hJX1RJRVRfQ0xTPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjEwPC9TVFQ+DQogICAgPE1BX0RJQ0hfVlU+RDY2PC9NQV9ESUNIX1ZVPg0KICAgIDxNQV9DSElfU08+MDRDNS4yLjE4NjUtMDc8L01BX0NISV9TTz4NCiAgICA8VEVOX0NISV9TTz5HbHVjb3NlPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJIC8+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MTE8L1NUVD4NCiAgICA8TUFfRElDSF9WVT5ENjY8L01BX0RJQ0hfVlU+DQogICAgPE1BX0NISV9TTz4wNEM1LjIuMTg2NS0wODwvTUFfQ0hJX1NPPg0KICAgIDxURU5fQ0hJX1NPPlRo4buDIENldG9uaWM8L1RFTl9DSElfU08+DQogICAgPEdJQV9UUkkgLz4NCiAgICA8TUFfTUFZIC8+DQogICAgPE1PX1RBIC8+DQogICAgPEtFVF9MVUFOIC8+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODMyPC9OR0FZX0tRPg0KICA8L0NISV9USUVUX0NMUz4NCiAgPENISV9USUVUX0NMUz4NCiAgICA8TUFfTEs+MTcwMDAwNTA1NTwvTUFfTEs+DQogICAgPFNUVD4xMjwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPkQ2NjwvTUFfRElDSF9WVT4NCiAgICA8TUFfQ0hJX1NPPjA0QzUuMi4xODY1LTA5PC9NQV9DSElfU08+DQogICAgPFRFTl9DSElfU08+QmlsaXJ1YmluPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJIC8+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MTM8L1NUVD4NCiAgICA8TUFfRElDSF9WVT5ENjY8L01BX0RJQ0hfVlU+DQogICAgPE1BX0NISV9TTz4wNEM1LjIuMTg2NS0xMDwvTUFfQ0hJX1NPPg0KICAgIDxURU5fQ0hJX1NPPlVyb2JpbGlub2dlbjwvVEVOX0NISV9TTz4NCiAgICA8R0lBX1RSST4wLDI8L0dJQV9UUkk+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MTQ8L1NUVD4NCiAgICA8TUFfRElDSF9WVT5ENjY8L01BX0RJQ0hfVlU+DQogICAgPE1BX0NISV9TTz4wNEM1LjIuMTg2NS0xMTwvTUFfQ0hJX1NPPg0KICAgIDxURU5fQ0hJX1NPPkTGsOG7oW5nIGNo4bqlcDwvVEVOX0NISV9TTz4NCiAgICA8R0lBX1RSSSAvPg0KICAgIDxNQV9NQVkgLz4NCiAgICA8TU9fVEEgLz4NCiAgICA8S0VUX0xVQU4gLz4NCiAgICA8TkdBWV9LUT4yMDE3MDMxNzA4MzI8L05HQVlfS1E+DQogIDwvQ0hJX1RJRVRfQ0xTPg0KICA8Q0hJX1RJRVRfQ0xTPg0KICAgIDxNQV9MSz4xNzAwMDA1MDU1PC9NQV9MSz4NCiAgICA8U1RUPjE1PC9TVFQ+DQogICAgPE1BX0RJQ0hfVlU+RDY2PC9NQV9ESUNIX1ZVPg0KICAgIDxNQV9DSElfU08+MDRDNS4yLjE4NjUtMTI8L01BX0NISV9TTz4NCiAgICA8VEVOX0NISV9TTz5Qb3JwaHlyaW48L1RFTl9DSElfU08+DQogICAgPEdJQV9UUkkgLz4NCiAgICA8TUFfTUFZIC8+DQogICAgPE1PX1RBIC8+DQogICAgPEtFVF9MVUFOIC8+DQogICAgPE5HQVlfS1E+MjAxNzAzMTcwODMyPC9OR0FZX0tRPg0KICA8L0NISV9USUVUX0NMUz4NCiAgPENISV9USUVUX0NMUz4NCiAgICA8TUFfTEs+MTcwMDAwNTA1NTwvTUFfTEs+DQogICAgPFNUVD4xNjwvU1RUPg0KICAgIDxNQV9ESUNIX1ZVPkQ2NjwvTUFfRElDSF9WVT4NCiAgICA8TUFfQ0hJX1NPPjA0QzUuMi4xODY1LTEzPC9NQV9DSElfU08+DQogICAgPFRFTl9DSElfU08+UHJvdGVpbiBCZW5jZSAtIEpvbmVzPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJIC8+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTiAvPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDgzMjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQogIDxDSElfVElFVF9DTFM+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MTc8L1NUVD4NCiAgICA8TUFfRElDSF9WVT5ENzY8L01BX0RJQ0hfVlU+DQogICAgPE1BX0NISV9TTz5ENzY8L01BX0NISV9TTz4NCiAgICA8VEVOX0NISV9TTz5DaOG7pXAgWHF1YW5nIG5n4buxYyB0aOG6s25nPC9URU5fQ0hJX1NPPg0KICAgIDxHSUFfVFJJIC8+DQogICAgPE1BX01BWSAvPg0KICAgIDxNT19UQSAvPg0KICAgIDxLRVRfTFVBTj5IYWkgcGjhu5VpIHPDoW5nIMSR4buBdSwgSMOsbmggdGltIGLDrG5oIHRoxrDhu51uZywgY8OhYyBjdW5nIHRpbSByw7U8L0tFVF9MVUFOPg0KICAgIDxOR0FZX0tRPjIwMTcwMzE3MDg0MjwvTkdBWV9LUT4NCiAgPC9DSElfVElFVF9DTFM+DQo8L0RTQUNIX0NISV9USUVUX0NMUz4=</NOIDUNGFILE></FILEHOSO><FILEHOSO><LOAIHOSO>XML5</LOAIHOSO><NOIDUNGFILE>PERTQUNIX0NISV9USUVUX0RJRU5fQklFTl9CRU5IPg0KICA8Q0hJX1RJRVRfRElFTl9CSUVOX0JFTkg+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MTwvU1RUPg0KICAgIDxESUVOX0JJRU4+LjwvRElFTl9CSUVOPg0KICAgIDxIT0lfQ0hBTiAvPg0KICAgIDxQSEFVX1RIVUFUIC8+DQogICAgPE5HQVlfWUw+MjAxNzAzMTcwODA5PC9OR0FZX1lMPg0KICA8L0NISV9USUVUX0RJRU5fQklFTl9CRU5IPg0KICA8Q0hJX1RJRVRfRElFTl9CSUVOX0JFTkg+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MjwvU1RUPg0KICAgIDxESUVOX0JJRU4+LjwvRElFTl9CSUVOPg0KICAgIDxIT0lfQ0hBTiAvPg0KICAgIDxQSEFVX1RIVUFUIC8+DQogICAgPE5HQVlfWUw+MjAxNzAzMTcwODEwPC9OR0FZX1lMPg0KICA8L0NISV9USUVUX0RJRU5fQklFTl9CRU5IPg0KICA8Q0hJX1RJRVRfRElFTl9CSUVOX0JFTkg+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+MzwvU1RUPg0KICAgIDxESUVOX0JJRU4+LjwvRElFTl9CSUVOPg0KICAgIDxIT0lfQ0hBTiAvPg0KICAgIDxQSEFVX1RIVUFUIC8+DQogICAgPE5HQVlfWUw+MjAxNzAzMTcwODI4PC9OR0FZX1lMPg0KICA8L0NISV9USUVUX0RJRU5fQklFTl9CRU5IPg0KICA8Q0hJX1RJRVRfRElFTl9CSUVOX0JFTkg+DQogICAgPE1BX0xLPjE3MDAwMDUwNTU8L01BX0xLPg0KICAgIDxTVFQ+NDwvU1RUPg0KICAgIDxESUVOX0JJRU4+LjwvRElFTl9CSUVOPg0KICAgIDxIT0lfQ0hBTiAvPg0KICAgIDxQSEFVX1RIVUFUIC8+DQogICAgPE5HQVlfWUw+MjAxNzAzMTcxMzM4PC9OR0FZX1lMPg0KICA8L0NISV9USUVUX0RJRU5fQklFTl9CRU5IPg0KPC9EU0FDSF9DSElfVElFVF9ESUVOX0JJRU5fQkVOSD4=</NOIDUNGFILE></FILEHOSO></HOSO></DANHSACHHOSO></THONGTINHOSO><CHUKYDONVI/></GIAMDINHHS>";
////				FileUtil.readFile(tmpF);
//		String a64 = CryptoUtil.BASE64_encode(content);
//		String a = CryptoUtil.BASE64_decode(a64);
////		System.out.println(a);
//		String[] arr=new String[]{a};
//		bom.findBOMStr(arr);
		int count = 0;
//		for (String file : bom.findBOMFiles()) {
//			// log(file);
//			System.out.println(file);
//			++count;
//		}	
//		bom.findBOMStr(bom.getListBOMFiles());
		String[] txt = bom.getListBOMFiles();
		for(String t:txt) {
			if(findBOMStr(t) != null)
				System.out.println("Number of files with BOM:" + (++count));
		}
//		System.out.println("Number of files with BOM:" + count);
		
//		inputStream= (InputStream) removeUtf8BOM(new FileInputStream(file));
//		FileUtils.copyInputStreamToFile(inputStream, file);
		
//		BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
//		System.out.println(removeBOM(bufferedReader,uft8));
		
		/*
		 * for(String file : bom.removeBOMs()){ log("Removed BOM from: " +
		 * file); }
		 */
	}

//	public static String removeUtf8BOM(String content) {
//		return BOMDetector.checkBOM(content);
//	}
//
//	public static boolean removeUtf8BOM(File file) {
//		return BOMDetector.checkBOM(file);
//	}
	
	private void chartsetDetector() {
	}
	public BOMDetector(String aRootDirectory, String... aFileExtensions) {
		fRootDir = new File(aRootDirectory);
		fExtensions = Arrays.asList(aFileExtensions);
		if (!fRootDir.exists() || fRootDir.isFile()) {
			throw new RuntimeException("Root directory not valid.");
		}
	}

	/**
	 * Find files with BOMs under the given root directory. Return their names.
	 */
	public List<String> findBOMFiles() throws IOException {
		List<String> result = new ArrayList<String>();
		for (File textFile : findTextFilesBeneath(fRootDir)) {
			if (checkBOM(textFile)) {
				result.add(textFile.getCanonicalPath());
			}
		}
		return result;
	}
	public String[] getListBOMFiles() throws IOException {
		
		List<File> list = findTextFilesBeneath(fRootDir);
		String[] result = new String[list.size()];
		int i=0;
		for (File textFile : list) {
			result[i]= FileUtil.readFile(textFile);
			i++;
		}
		return result;
	}
	private static boolean checkBOM(String aTextFile, int[] charset){
		boolean result = false;
		if (aTextFile.length() < charset.length)
			return result;
		// open as bytes here, not characters
		int[] firstFewBytes = new int[charset.length];
		
		try(
				InputStream inputStream = new ByteArrayInputStream(aTextFile.getBytes()); 
				) {			
			for (int index = 0; index < charset.length; ++index) {
				firstFewBytes[index] = inputStream.read(); // read a single byte
				System.out.print(firstFewBytes[index] + "-");
				System.out.print(charset[index]);
				System.out.println();
			}
			result = Arrays.equals(firstFewBytes, charset);		
		}catch(Exception e){
			e.printStackTrace();
		}
		return result;
	}
//	public void findBOMStr(String[] textArr) throws IOException {
//		for (String text : textArr) {
//			System.out.println("B = "+text.length());
//			if(checkBOM(text,BYTE_ORDER_MARK_UTF8)) 
//				System.out.println("The string has BOMs character");
//			else if(checkBOM(text,BYTE_ORDER_MARK_UTF16_BE))
//				System.out.println("The string has BOMs character");
//			else if(checkBOM(text,BYTE_ORDER_MARK_UTF16_LE))
//				System.out.println("The string has BOMs character");
//			else
//				System.out.println("The string has no BOMs character");
//		}
//	}
	private void findBOMStr(String[] textArr) throws IOException {
		int[] charset =new int[3];
		String r = null;
		for (String text : textArr) {
			System.out.println("B = "+text.length());
			boolean result=false;
			if(checkBOM(text,BYTE_ORDER_MARK_UTF8)) {
				result = true;
				charset=BYTE_ORDER_MARK_UTF8;
			}else if(checkBOM(text,BYTE_ORDER_MARK_UTF16_BE)) {
				result = true;
				charset=BYTE_ORDER_MARK_UTF16_BE;
			}else if(checkBOM(text,BYTE_ORDER_MARK_UTF16_LE)) {
				result = true;
				charset=BYTE_ORDER_MARK_UTF16_LE;
			}else {
				System.out.println("The string has no BOMs character");
//				FileUtil.writeFile(new File("c:/xmldata/checkout/TEST_BOM.xml"), text);
			}
			if(result) {
				r= removeBOM(text.getBytes(),charset);								
				if(r!=null){					
					System.out.println("Removing BOM characters successfully");					
				}
				else System.out.println("Detected BOM characters but removing unsuccessfully");
//				FileUtil.writeFile(new File("c:/xmldata/checkout/TEST_BOM_removed.xml"), text);
			}
		}
	}
	
	public static String findBOMStr(String text) {
		int[] charset =new int[3];
		String r = null;
		boolean result=false;
		if(checkBOM(text,BYTE_ORDER_MARK_UTF8)) {
			result = true;
			charset=BYTE_ORDER_MARK_UTF8;
		}else if(checkBOM(text,BYTE_ORDER_MARK_UTF16_BE)) {
			result = true;
			charset=BYTE_ORDER_MARK_UTF16_BE;
		}else if(checkBOM(text,BYTE_ORDER_MARK_UTF16_LE)) {
			result = true;
			charset=BYTE_ORDER_MARK_UTF16_LE;
		}else {
			System.out.println("The string has no BOMs character");
//				FileUtil.writeFile(new File("c:/xmldata/checkout/TEST_BOM.xml"), text);
		}
		if(result) {
			r= removeBOM(text.getBytes(),charset);								
			if(r!=null){					
				System.out.println("Removing BOM characters successfully");					
			}
			else System.out.println("Detected BOM characters but removing unsuccessfully");
//				FileUtil.writeFile(new File("c:/xmldata/checkout/TEST_BOM_removed.xml"), text);
			return r;
		}else {
			return text;
		}
	}

	/**
	 * Find and remove BOMs from files under the given root directory.
	 * Overwrites files. Return the names of the affected files.
	 */
	public List<String> removeBOMs() throws IOException {
		List<String> result = new ArrayList<String>();
		for (String bomFile : findBOMFiles()) {
			removeBOM(bomFile);
			result.add(bomFile);
		}
		return result;
	}

	// PRIVATE	

	private List<File> findTextFilesBeneath(File aStartingDir) throws IOException {
		List<File> result = new ArrayList<File>();
		File[] filesAndDirs = aStartingDir.listFiles();
		List<File> filesDirs = Arrays.asList(filesAndDirs);
		for (File file : filesDirs) {
			if (isTextFile(file)) {
				System.out.println(file.getName());
				result.add(file);
			}
			if (file.isDirectory()) {
				// recursive call!!
				List<File> deeperList = findTextFilesBeneath(file);
				result.addAll(deeperList);
			}
		}
		return result;
	}

	private boolean isTextFile(File aFile) throws IOException {
		boolean result = false;
		String fileName = aFile.getCanonicalPath();
		int finalDot = fileName.lastIndexOf(".");
		if (finalDot > -1) {
			String extension = fileName.substring(finalDot);
			result = fExtensions.contains(extension);
		}
		return result;
	}
	public static boolean checkBOM(File aTextFile){
		if (checkBOM(aTextFile, BYTE_ORDER_MARK_UTF8)) {
//			System.out.println("Removing BYTE_ORDER_MARK_UTF8 has done");
			return true;
		} else if (checkBOM(aTextFile, BYTE_ORDER_MARK_UTF16_BE)) {
			convertFileToUTF8(aTextFile,"UTF-16BE");			
//			System.out.println("Removing BYTE_ORDER_MARK_UTF16_BE has done");
			return true;
		} else if (checkBOM(aTextFile, BYTE_ORDER_MARK_UTF16_LE)) {
			convertFileToUTF8(aTextFile,"UTF-16LE");
//			System.out.println("Removing BYTE_ORDER_MARK_UTF16_LE has done");
			return true;
		} else
			return false;
	}
	public static String checkBOM(String strContent){
//		return checkBOM(strContent, char_bom);
		return findBOMStr(strContent);
	}

	private static boolean checkBOM(File aTextFile, int[] charset){
		boolean result = false;
		int r = 0;
		if (aTextFile.length() < charset.length)
			return false;
		// open as bytes here, not characters
		int[] firstFewBytes = new int[charset.length];
		InputStream input = null;
		try {
			input = new FileInputStream(aTextFile);
			for (int index = 0; index < charset.length; ++index) {
				firstFewBytes[index] = input.read(); // read a single byte
//				System.out.print(firstFewBytes[index] + "-");
//				System.out.print(charset[index]);
//				System.out.println();
			}
			result = Arrays.equals(firstFewBytes, charset);
			if(result){
//				r= removeBOM(aTextFile,charset);
				if(r==1){					
					System.out.println("Removing BOM characters successfully");
				}
				else
					System.out.println("Detected BOM characters but removing unsuccessfully");
			}
			input.close();
		}catch(IOException e){
			e.printStackTrace();
		}
		return result;
	}
	private static String checkBOM(String strContent, String[] charset){
		String tmp = null;
		StringBuilder builder = null;
		if(strContent != null){
			builder = new StringBuilder(strContent);
			for(int i = 0;i<charset.length;i++){
//				System.out.println(charset[i]);
				tmp = charset[i];
				int j = builder.indexOf(tmp);				
				if(j>-1){
//					System.out.println(j);
					int k = tmp.length();					
					builder = builder.replace(j,j+k,"");
				}
			}
			strContent = builder.toString();
		}		
		return strContent;
	}

	private boolean removeBOM(String aTextFile) throws IOException {
		if (removeBOM(aTextFile, BYTE_ORDER_MARK_UTF8)!=-1) {
			System.out.println("removal BYTE_ORDER_MARK_UTF8 done");
			return true;
		} else if (removeBOM(aTextFile, BYTE_ORDER_MARK_UTF16_BE) !=-1) {
			System.out.println("removal BYTE_ORDER_MARK_UTF16_BE done");
			return true;
		} else if (removeBOM(aTextFile, BYTE_ORDER_MARK_UTF16_LE) !=-1) {
			System.out.println("removal BYTE_ORDER_MARK_UTF16_LE done");
			return true;
		} else
			return false;
	}
	
	private int removeBOM(String aTextFile, int[] charset) {
		File bomFile = new File(aTextFile);
		return removeBOM(bomFile, charset);
	}
	
	public static int removeBOM(File bomFile, int[] charset) {		
		int rs=-1;
		long initialSize = bomFile.length();
		long truncatedSize = initialSize - charset.length;
		byte[] memory = new byte[(int) (truncatedSize)];
		InputStream input = null;
		OutputStream output = null;
		try {
			input = new BufferedInputStream(new FileInputStream(bomFile));
			input.skip(charset.length);
			int totalBytesReadIntoMemory = 0;
			while (totalBytesReadIntoMemory < truncatedSize) {
				int bytesRemaining = (int) truncatedSize - totalBytesReadIntoMemory;
				int bytesRead = input.read(memory, totalBytesReadIntoMemory, bytesRemaining);
				if (bytesRead > 0) {
					totalBytesReadIntoMemory = totalBytesReadIntoMemory + bytesRead;
				}
			}
			input.close();
			output = new BufferedOutputStream(new FileOutputStream(bomFile));
			output.write(memory);
			rs =1;
			//rs = overwriteWithoutBOM(memory, bomFile);
		} catch(IOException e){
			e.printStackTrace();
			return -1;
		}catch(Exception e){
			e.printStackTrace();
			return -1;
		}finally {
			try {
				if(input != null)
					input.close();
				if(output != null){
					output.flush();
					output.close();
				}					
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
//		File after = new File(bomFile.);
//		long finalSize = bomFile.length();
//		long changeInSize = initialSize - finalSize;
//		if (changeInSize != charset.length) {
//			throw new RuntimeException("Change in file size: " + changeInSize + " Expected change: " + charset.length);
//		}
		return rs;
	}
	public static String removeBOM(byte[] bomFile, int[] charset) {		
		String rs=null;
		long initialSize = bomFile.length;
		long truncatedSize = initialSize - charset.length;
		byte[] memory = new byte[(int) (truncatedSize)];
		ByteArrayInputStream input = null;
		try {
			input = new ByteArrayInputStream(bomFile);
			input.skip(charset.length);
			int totalBytesReadIntoMemory = 0;
			while (totalBytesReadIntoMemory < truncatedSize) {
				int bytesRemaining = (int) truncatedSize - totalBytesReadIntoMemory;
				int bytesRead = input.read(memory, totalBytesReadIntoMemory, bytesRemaining);
				if (bytesRead > 0) {
					totalBytesReadIntoMemory = totalBytesReadIntoMemory + bytesRead;
				}
			}
			input.close();
			rs = new String(memory,"UTF-8");
			
		} catch(IOException e){
			e.printStackTrace();
		}catch(Exception e){
			e.printStackTrace();
		}finally {
			try {
				if(input != null)
					input.close();						
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		return rs;
	}
	private static InputStream removeBOM(InputStream inputStream) {
	    PushbackInputStream pushbackInputStream = new PushbackInputStream(new BufferedInputStream(inputStream), 3);
	    byte[] bom = new byte[3];
	    try {
			if (pushbackInputStream.read(bom) != -1) {
			    if (!(bom[0] == (byte) 0xEF || bom[1] == (byte) 0xBB || bom[2] == (byte) 0xBF)) {
			        pushbackInputStream.unread(bom);
			    }
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    return pushbackInputStream;
	}
	private static boolean removeBOM(Reader reader, char[] bom) {
	    int bomLength = bom.length;
	    try {
			reader.mark(bomLength);
			char[] possibleBOM = new char[bomLength];
		    reader.read(possibleBOM);
		    for (int x = 0; x < bomLength; x++) {
		    	System.out.println((int)possibleBOM[x]);
		        if ((int) bom[x] != (int) possibleBOM[x]) {
		            reader.reset();
		            return false;
		        }
		    }
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	    return true;
	}
	private static int overwriteWithoutBOM(byte[] aBytesWithoutBOM, File aTextFile){
		OutputStream output = null;
		try {
			output = new BufferedOutputStream(new FileOutputStream(aTextFile));
			output.write(aBytesWithoutBOM);
		}catch(IOException e){
			e.printStackTrace();
			return -1;
		}catch(Exception e){
			e.printStackTrace();
			return -1;
		}
		finally {
			try {
				if(output != null)
					output.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return 1;
	}
	private static void convertFileToUTF8(File file, String charset){
		InputStreamReader isr = null;
		Reader in = null;
		StringBuffer buffer = null;
		Writer out = null;
		try{
			isr = new InputStreamReader(new FileInputStream(file),charset);
			in = new BufferedReader(isr);
			buffer = new StringBuffer();	
			int ch;
			while ((ch = in.read()) > -1) {
			    buffer.append((char)ch);
			}
			out = new OutputStreamWriter(new FileOutputStream(file), "UTF8");
			out.write(buffer.toString());
		}catch(IOException e){
			e.printStackTrace();
		}finally{			
			try {
				if(in != null){
					in.close();
				}
				if(isr != null)
					isr.close();
				if(out != null){
					out.flush();
					out.close();
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
}